#!/bin/sh

## live-build(7) - System Build Scripts
## Copyright (C) 2006-2011 Daniel Baumann <daniel@debian.org>
##
## live-build comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
## This is free software, and you are welcome to redistribute it
## under certain conditions; see COPYING for details.


set -e

# Including common functions
. "${LB_BASE:-/usr/share/live/build}"/scripts/build.sh

# Setting static variables
DESCRIPTION="$(Echo 'build disk image')"
HELP=""
USAGE="${PROGRAM} [--force]"

Arguments "${@}"

# Reading configuration files
Read_conffiles config/all config/common config/bootstrap config/chroot config/binary config/source
Set_defaults

if ! In_list hdd "${LB_BINARY_IMAGES}"
then
	exit 0
fi

Echo_message "Begin building binary hdd image..."

# Requiring stage file
Require_stagefile .stage/chroot_proc
Require_stagefile .stage/kvm_rootfs

# Checking stage file
Check_stagefile .stage/kvm_hdd

# Checking lock file
Check_lockfile .lock

# Creating lock file
Create_lockfile .lock

# Checking depends
Check_package chroot/sbin/mkdosfs dosfstools
Check_package chroot/usr/share/doc/mtools mtools
Check_package chroot/sbin/parted parted

Set_partition_variables()
{
  ROOT_PARTITION_DEVICE="/dev/mapper/$3"
  MAIN_DISK="$8"
}

Setup_partitions()
{
  Set_partition_variables `${LB_ROOT_COMMAND} kpartx -av "$1"`
}

Remove_partitions()
{
  ${LB_ROOT_COMMAND} kpartx -dv "$1"
}

Add_boot_config()
{
    local ROOT_DEVICE TARGET_PARTITION kernel initrd
    ROOT_DEVICE="$1"
    TARGET_PARTITION="$2"
    Echo_message "Obtaining UUID"
    eval $(${LB_ROOT_COMMAND} blkid -o udev "${ROOT_DEVICE}")

    # Find kernel and initrd
    kernel=$(ls ${TARGET_PARTITION}/boot/vmlinuz* | head -1|sed "s|${TARGET_PARTITION}||")
    initrd=$(ls ${TARGET_PARTITION}/boot/initrd* | head -1|sed "s|${TARGET_PARTITION}||")

    if [ -z "${kernel}" ]
    then
	    Echo_error "Missing kernel"
	    exit 1
    elif [ -z "${initrd}" ]
    then
	    Echo_error "Missing initrd"
	    exit 1
    elif [ -z "${ID_FS_UUID}" ]
    then
    	    Echo_error "Missing UUID"
	    exit 1
    fi

    # Create boot config
    Echo_message "Creating boot config for UUID ${ID_FS_UUID}"

    # Clean up grub v1 stuff
    mkdir -p chroot/binary.tmp/boot/grub
    rm -f chroot/binary.tmp/boot/grub/menu.lst chroot/binary.tmp/boot/grub/default binary.tmp/boot/grub/gfxblacklist.txt

    cat > chroot/binary.tmp/boot/grub/grub.cfg <<EOF
# Patented Grub2 GerritUp boot file
# run update-grub for a real one
#
insmod ext2
search --no-floppy --fs-uuid --set ${ID_FS_UUID}
linux	${kernel} root=UUID=${ID_FS_UUID} ro quiet nosplash
initrd  ${initrd}
boot
EOF

    cat > chroot/binary.tmp/boot/grub/load.cfg <<EOF
search.fs_uuid ${ID_FS_UUID} root
set prefix=(\$root)/boot/grub
EOF
}

# Run grub commands in the chroot and write to the disk image.
Chroot_install_grub2()
{
    local TARGET_OPTIONS INSTALL_DEVICE INSTALL_DRIVE MODULES
    TARGET_OPTIONS="${2}"
    INSTALL_DEVICE="${1}"
    INSTALL_DRIVE='(hd9)'
    MODULES="biosdisk ext2 part_msdos search_fs_uuid"


    cat > ${TARGET_PARTITION}/boot/grub/device.map <<EOF
${INSTALL_DRIVE}	${MAIN_DISK}
${INSTALL_DEVICE}	${FREELO}
EOF

    #Copy over boot files
    Echo_message "Copying boot files"
    grubdir=${TARGET_PARTITION}/boot/grub
    localedir=${TARGET_PARTITION}/usr/share/locale
    cp -a ${TARGET_PARTITION}/usr/lib/grub/i386-pc/* ${grubdir}
    mkdir -p ${grubdir}/locale
    for dir in ${localedir}/* ${localedir}-langpack/*; do
      if test -f "$dir/LC_MESSAGES/grub.mo"; then
	cp -f "$dir/LC_MESSAGES/grub.mo" "${grubdir}/locale/${dir##*/}.mo"
      fi
    done

    #Create grub environment
    Echo_message "Checking Grub environment"
    if ! test -f ${TARGET_PARTITION}/grubenv; then
	Chroot chroot grub-editenv binary.tmp/boot/grub/grubenv create
    fi

    #Create boot sector image
    Echo_message "Creating boot sector"
    Chroot chroot grub-mkimage -v ${TARGET_OPTIONS} -p binary.tmp/boot/grub -c binary.tmp/boot/grub/load.cfg --output binary.tmp/boot/grub/core.img ${MODULES}


    Echo_message "Installing boot sector"
    Chroot chroot ${grub_setup} -v -b boot.img -c core.img -d binary.tmp/boot/grub -m binary.tmp/boot/grub/device.map -r "${INSTALL_DEVICE}" "${INSTALL_DRIVE}"
    rm ${grubdir}/device.map
}

#Run grub commands directly in the disk image
Direct_install_grub2() {
    local MAIN_DISK TARGET_PARTITION
    MAIN_DISK="${1}"
    TARGET_PARTITION="${2}"
    Echo_message "Direct installing grub2..."
    if [ ! -e "${TARGET_PARTITION}/usr/sbin/grub-install" ]
    then
        Echo_error "Missing grub2 files in binary image - aborting"
	exit 1
    fi

    Echo_message "Bind mounting system devices"
    for word in dev proc sys 
    do
        ${LB_ROOT_COMMAND} mount --bind /${word} ${TARGET_PARTITION}/${word}
    done

    if [ -b "${TARGET_PARTITION}/${MAIN_DISK}" ]
    then
	Echo_message "Running grub-install"
	Chroot "${TARGET_PARTITION}" grub-install --debug --recheck "${MAIN_DISK}"
    else
        Echo_error "Target main disk not a block device - skipping"
    fi

    Echo_message "unmounting system devices"
    for word in sys proc dev
    do
        ${LB_ROOT_COMMAND} umount ${TARGET_PARTITION}/${word}
    done

}

Scale_number()
{
	SCALE_PERCENTAGE=$(echo "$2" | sed 's/%//')
	expr "$1" \* \( 100 + "${SCALE_PERCENTAGE}" \) / 100 
}

if [ "${LB_ARCHITECTURES}" = "sparc" ]
then
	case "${LB_BINARY_FILESYSTEM}" in
		ext2|ext3|ext4)
			Check_package chroot/sbin/mkfs.${LB_BINARY_FILESYSTEM} e2fsprogs
			;;

		*)
			Echo_error "Sparc only supports booting from ext2, ext3, ext4 or ufs."
			exit 1
			;;
	esac
fi

case "${LB_BOOTLOADER}" in
	grub)
		Check_package chroot/usr/sbin/grub grub
		;;
	syslinux)
		Check_package chroot/usr/bin/syslinux syslinux
		;;
	grub2)
		Check_package chroot/usr/sbin/grub-install grub-pc
		;;
esac

# Restoring cache
Restore_cache cache/packages_binary

# Installing depends
Install_package

# Remove old binary
if [ -f binary.img ]
then
	rm -f binary.img
fi

# Enforce fat32 if we find individual files bigger than 2GB
if [ "${LB_BINARY_FILESYSTEM}" = "fat16" ] && [ -n "$(find binary -size +1999M)" ]
then
	Echo_warning "FAT16 doesn't support files larger than 2GB, automatically enforcing FAT32."

	LB_BINARY_FILESYSTEM="fat32"
	export LB_BINARY_FILESYSTEM
fi

# Enforce fat32 if we have images in total bigger than 2GB
if [ "${LB_BINARY_FILESYSTEM}" = "fat16" ] && [ "$(du -s binary | awk '{ print $1 }')" -gt "1900000" ]
then
	Echo_warning "FAT16 doesn't support partitions larger than 2GB, automatically enforcing FAT32"

	LB_BINARY_FILESYSTEM="fat32"
	export LB_BINARY_FILESYSTEM
fi

# Everything which comes here needs to be cleaned up,
DU_DIM="$(du -ms binary | cut -f1)"
REAL_DIM="$(Calculate_partition_size ${DU_DIM} ${LB_BINARY_FILESYSTEM})"
Echo_message "Files take up ${DU_DIM}M on disk"
case "${LB_HDD_SIZE}" in
	auto)
		REQUIRED_HDD_SIZE="${REAL_DIM}"
		ROOT_RESERVED='-m 0'
		;;
	*%)
		REQUIRED_HDD_SIZE=$(Scale_number "${REAL_DIM}" "${LB_HDD_SIZE}")
		ROOT_RESERVED=''
		;;
	*)	
		REQUIRED_HDD_SIZE="${LB_HDD_SIZE}"
		ROOT_RESERVED=''
		;;
esac
Echo_message "Partion size is ${REQUIRED_HDD_SIZE}M"
#Round up to nearest 256M so that inode calculations work properly and
#add in the partition header.
REQUIRED_HDD_SIZE=$(expr \( ${REQUIRED_HDD_SIZE} / 256 + 1 \) \* 262144 + 64)
Echo_message "Image size is ${REQUIRED_HDD_SIZE}K"
dd if=/dev/zero of=chroot/binary.img bs=1k count=0 seek=${REQUIRED_HDD_SIZE}
FREELO="$(${LB_LOSETUP} -f)"
${LB_ROOT_COMMAND} mount --bind /dev chroot/dev

echo "!!! The following error/warning messages can be ignored !!!"
Losetup $FREELO chroot/binary.img 0

case "${LB_ARCHITECTURES}" in
	sparc)
		PARTITION_TABLE_TYPE="sun"
		;;
	*)
		PARTITION_TABLE_TYPE="msdos"
		;;
esac

case "${LB_BINARY_FILESYSTEM}" in
	ext2|ext3|ext4)
		PARTITION_TYPE="ext2"
		;;

	fat16|fat32)
		PARTITION_TYPE="${LB_BINARY_FILESYSTEM}"
		;;

	*)
		Echo_error "Unsupported binary filesystem %s" "${LB_BINARY_FILESYSTEM}"
		exit 1
		;;
esac

# Partition sized to leave 64 x 512 byte sectors at the front and back of
# the disk to allow for embedded bootloaders and GPT partitions.
case "${LB_BUILD_WITH_CHROOT}" in
	true)
		Chroot chroot "parted -s -a none -- ${FREELO} mklabel ${PARTITION_TABLE_TYPE}" || true
		Chroot chroot "parted -s -a none -- ${FREELO} mkpart primary ${PARTITION_TYPE} 64s -65s" || true

		if [ "${LB_BOOTLOADER}" = "syslinux" ]
		then
			dd if=chroot/usr/lib/syslinux/mbr.bin of=${FREELO} bs=440 count=1
		fi
		;;

	false)
		parted -s -a none -- ${FREELO} mklabel ${PARTITION_TABLE_TYPE} || true
		parted -s -a none -- ${FREELO} mkpart primary ${PARTITION_TYPE} 64s -65s || true

		if [ "${LB_BOOTLOADER}" = "syslinux" ]
		then
			dd if=/usr/lib/syslinux/mbr.bin of=${FREELO} bs=440 count=1
		fi
		;;
esac

Lodetach "${FREELO}"

#ROOT_PARTITION_DEVICE="$(${LB_LOSETUP} -f)"
#Losetup $ROOT_PARTITION_DEVICE chroot/binary.img 1

Setup_partitions chroot/binary.img

Echo_message "Main disk on device ${MAIN_DISK}"
Echo_message "Root partition on device ${ROOT_PARTITION_DEVICE}"

case "${LB_BINARY_FILESYSTEM}" in
	ext2|ext3|ext4)
		MKFS="${LB_BINARY_FILESYSTEM}"
		MKFS_OPTIONS="-J size=128 -E resize=4294967295 -L ${LB_HDD_LABEL} ${ROOT_RESERVED}"
		;;

	fat16)
		MKFS="vfat"
		MKFS_OPTIONS="-F 16 -n ${LB_HDD_LABEL}"
		;;

	fat32)
		MKFS="vfat"
		MKFS_OPTIONS="-F 32 -n ${LB_HDD_LABEL}"
		;;
esac

case "${LB_BUILD_WITH_CHROOT}" in
	true)
		if ! Chroot chroot "test -s /etc/mtab"
		then
			Chroot chroot "ln -sf /proc/mounts /etc/mtab"
			FAKE_MTAB="true"
		fi
		
		Chroot chroot "mkfs.${MKFS} ${MKFS_OPTIONS} ${ROOT_PARTITION_DEVICE}"
		;;

	false)
		mkfs.${MKFS} ${MKFS_OPTIONS} ${ROOT_PARTITION_DEVICE}
		;;
esac

case "${LB_BINARY_FILESYSTEM}" in
	fat*)
		CP_OPTIONS="-L"
		;;
esac

Echo_message "Copying across root filesystem. This may take a while..."
TARGET_PARTITION=chroot/binary.tmp
mkdir -p ${TARGET_PARTITION}
${LB_ROOT_COMMAND} mount ${ROOT_PARTITION_DEVICE} ${TARGET_PARTITION}
cp -a -T ${CP_OPTIONS} binary/ ${TARGET_PARTITION}

# Try and make the disk bootable

if [ "${LB_BOOTLOADER}" = "grub2" ]
then
	Echo_message "Installing grub2 ..."
	case "${LB_BUILD_WITH_CHROOT}" in
		true)
			Add_boot_config "${ROOT_PARTITION_DEVICE}" "${TARGET_PARTITION}"

			# Check grub version
			grub_version=`Chroot chroot grub-install --version`
			grub_setup=grub-setup
			# Pick installation method based on version
			case "${grub_version}" in
			    *1.98*)
				Chroot_install_grub2 '(hd9,1)'
				;;
			    *1.99*)
				Chroot_install_grub2 '(hd9,msdos1)' '-O i386-pc'
				;;
			    *2.00*)
			        Direct_install_grub2 "${MAIN_DISK}" "${TARGET_PARTITION}"
				;;
			esac
			;;
		*)	echo "Not implemented"
			exit 1
			;;
	esac
fi

${LB_ROOT_COMMAND} umount ${TARGET_PARTITION}
rmdir ${TARGET_PARTITION}

if [ "${LB_BOOTLOADER}" = "syslinux" ]
then
	case "${LB_BUILD_WITH_CHROOT}" in
		true)
			Chroot chroot "syslinux ${ROOT_PARTITION_DEVICE}"
			;;

		false)
			syslinux ${ROOT_PARTITION_DEVICE}
			;;
	esac
fi

#Lodetach ${ROOT_PARTITION_DEVICE}

echo "!!! The above error/warning messages can be ignored !!!"

#ROOT_PARTITION_DEVICE="$(${LB_LOSETUP} -f)"
#Losetup "${ROOT_PARTITION_DEVICE}" chroot/binary.img 0

case "${LB_BUILD_WITH_CHROOT}" in
	true)
		Chroot chroot "parted -s ${MAIN_DISK} set 1 boot on" || true
		Chroot chroot "parted -s ${MAIN_DISK} set 1 lba off" || true
		;;

	false)
		parted -s "${MAIN_DISK}" set 1 boot on || true
		parted -s "${MAIN_DISK}" set 1 lba off || true
		;;
esac

Remove_partitions chroot/binary.img

${LB_ROOT_COMMAND} umount chroot/dev

if [ "${FAKE_MTAB}" = "true" ]
then
	Chroot chroot "rm -f /etc/mtab"
fi

TARGET_NAME="${LB_DISTRIBUTION}-${LB_ARCHITECTURES}-$$"

Echo_message "Converting image to Qcow2 format"
qemu-img convert -p -O qcow2 -c chroot/binary.img ${TARGET_NAME} && rm -f chroot/binary.img

# Saving cache
Save_cache cache/packages_binary

# Removing depends
Remove_package

# Creating stage file
Create_stagefile .stage/kvm_hdd
