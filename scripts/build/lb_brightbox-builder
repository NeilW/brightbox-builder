#!/bin/sh
# Brightbox Image Builder
#
# Generate a build directory for a distribution
#
# (c) 2011 Brightbox Systems Ltd
# Author: Neil Wilson
#
# Licensed under the AGPL-3
#

LB_BASE="${LB_BASE:-/usr/share/live/build}"
BB_DATA=${LB_BASE}/data/brightbox-builder

set -e

usage() {
cat >&2 <<EOF
Brightbox Image Builder
Usage
	$(basename $0) [--experimental] [distribution-handle]

Images available:
EOF
for word in ${BB_DATA}/*
do
	[ -f "${word}" ] && echo "	$(basename ${word})" >&2
done
}

fail() {
  echo "$(basename $0): $1" >&2;
  exit ${2:-1}
}

generate_create_header() {
case "${1:-x86_64}" in
	x86_64)
		debarch="amd64"
		;;
	i686)
		debarch="i386"
		;;
esac
cat <<EOF
#!/bin/sh

export release="${release}"
export other_sources="ppa-brightbox-build${experimental:+ ppa-brightbox-experimental}"
export architecture="${debarch}"
export package_list="${package_list}"
export name="${name}"
export description="${description}"
export compatibility="${compatibility}"
EOF
}

valid_arch() {
  case "${1:-i686}" in
    x86_64)
	        [ $(uname -m) = "x86_64" ] && return 0 
		;;
    i686)  	return 0
		;;
  esac
  echo "Invalid architecture '${1}' for $(uname -m) machine" >&2
  return 1
}

load_template() {
	bb_release=$1
	template="${BB_DATA}/${bb_release}"
	[ -f "${template}" ] || fail "Can't locate template file for ${bb_release}"
	. ${template}
}
		
generate_build_dir() {
	bb_release=$1
	if [ -d "${bb_release}" ]
        then
		action="Refreshing"
	else
		action="Creating"
	fi
	load_template ${bb_release}
	print_build_report
	for arch in ${architectures}
	do
	  valid_arch ${arch} || continue
	  echo "${action} ${arch} configuration"
	  arch_autodir="${bb_release}/${arch}/auto"
	  [ -d "${arch_autodir}" ] || mkdir -p "${arch_autodir}" || fail "Can't create config directory at ${arch_autodir}"
	  cp -a ${BB_DATA}/${distribution_config}/clean ${BB_DATA}/${distribution_config}/config ${arch_autodir}
	  generate_create_header ${arch} | cat - "${BB_DATA}/${distribution_config}/build" >"${arch_autodir}/build"
	  chmod a+x "${arch_autodir}/build"
	done
}

build_release() {
	bb_release=$1
	load_template ${bb_release}
	for arch in ${architectures}
	do
		echo "Building ${name} (${arch})"
		(cd ${bb_release}/${arch}; exec sudo lb build > build.log 2>&1) || fail "Failed to build ${name} (${arch}) - check logs"
	done
}

upload_release() {
	bb_release=$1
	load_template ${bb_release}
	for arch in ${architectures}
	do
		(cd ${bb_release}/${arch}; exec lb upload)
	done
}

print_build_report() {
	echo "Generating ${experimental:+experimental }build configuration for:"
	echo 
	echo "name:          		${name}"
	echo "description:   		${description}"
	echo "architectures: 		${architectures}"
	echo "distribution config:  	${distribution_config}"
	echo "release:        		${release}"
	[ "${compatibility:-0}" -eq 1 ] && echo "compatibility: on"
	echo
}

[ "$#" -gt 0 ] || { usage; exit 0; }
#[ $(id -u) -eq 0 ] || fail "Need to run as root"

for arg
do
	case "${arg}" in
		--experimental)
			experimental=1
			shift
			;;
		-u|--usage)
			usage
			exit 0
			;;
		*)	break
			;;
	esac
done


for bb_release
do
	generate_build_dir ${bb_release}
done

for bb_release
do
	build_release ${bb_release}
done

for bb_release
do
	upload_release ${bb_release}
done
